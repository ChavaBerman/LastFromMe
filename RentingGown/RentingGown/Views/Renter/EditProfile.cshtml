@model RentingGown.Models.Renters

@{
    Layout = "~/Views/Shared/_Renter.cshtml";
}
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<!-- Optional: include a polyfill for ES6 Promises for IE11 and Android browser -->
<script src="https://cdn.jsdelivr.net/npm/promise-polyfill"></script>
<script>
    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:
    // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: -33.8688, lng: 151.2195 },
            zoom: 13
        });
        var card = document.getElementById('pac-card');
        var input = document.getElementById('pac-input');
        var types = document.getElementById('type-selector');
        var strictBounds = document.getElementById('strict-bounds-selector');

        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

        var autocomplete = new google.maps.places.Autocomplete(input);

        // Bind the map's bounds (viewport) property to the autocomplete object,
        // so that the autocomplete requests use the current map bounds for the
        // bounds option in the request.
        autocomplete.bindTo('bounds', map);

        // Set the data fields to return when the user selects a place.
        autocomplete.setFields(
            ['address_components', 'geometry', 'icon', 'name']);

        var infowindow = new google.maps.InfoWindow();
        var infowindowContent = document.getElementById('infowindow-content');
        infowindow.setContent(infowindowContent);
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        autocomplete.addListener('place_changed', function () {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                // User entered the name of a Place that was not suggested and
                // pressed the Enter key, or the Place Details request failed.
                swal({
                    icon: 'error',
                    title: 'נתקלנו בבעיה',
                    text: 'כתובת לא תקינה.'
                })
                return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindowContent.children['place-icon'].src = place.icon;
            infowindowContent.children['place-name'].textContent = place.name;
            infowindowContent.children['place-address'].textContent = address;
            infowindow.open(map, marker);
        });

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
            radioButton.addEventListener('click', function () {
                autocomplete.setTypes(types);
            });
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-address', ['address']);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);

        document.getElementById('use-strict-bounds')
            .addEventListener('click', function () {
                console.log('Checkbox clicked! New state=' + this.checked);
                autocomplete.setOptions({ strictBounds: this.checked });
            });
    }
</script>
<style>
    /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
    #map {
        height: 100%;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    /*#infowindow-content {
                   display: none;
               }*/

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }
</style>
<section>
    <div class="block gray ">
        <div class="container">
            <div class="row">
                <div class="col-md-6 col-md-offset-3">
                    <div class="account-popup-sec static-popup">
                        <div class="acount-popup login-popup">
                            <h2>ערוך פרופיל</h2>

                            @using (Html.BeginForm())
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.id_renter)
                                    <input type="hidden" name="id_renter" value=@Model.id_renter />
                                    <div class="form-group">
                                        <label>שם פרטי</label>
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.fname, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.fname, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>שם משפחה</label>
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.lname, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.lname, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>טלפון</label>
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.phone, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>סלולארי</label>
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.cellphone, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.cellphone, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>כתובת</label>
                                        <div class="col-md-10">
                                            <div class="pac-card" id="pac-card">

                                                <div id="pac-container" style="display:block">
                                                    <input id="pac-input" type="text" name="address" onblur="blurAddress()"
                                                           placeholder="הכנס כתובת">
                                                </div>
                                            </div>
                                            <div id="map" style="height:250px"></div>
                                            <div id="infowindow-content">
                                                <img src="" width="16" height="16" id="place-icon">
                                                <span id="place-name" class="title"></span><br>
                                                <span id="place-address"></span>
                                            </div>
                                            <!-- Replace the value of the key parameter with your own API key. -->
                                            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDjo2Qe6DhOmWvJ8yO7-PzFjTuZ_8zSPCk&libraries=places&callback=initMap"
                                                    async defer></script>
                                        </div>
                                    </div>

                                    <div class="field">
                                        <button type="submit" id="mainSearchbtn" style="width:20%;">
                                            שמור
                                        </button>

                                    </div>
                                </div>
                            }
                            @section Scripts {
                                @Scripts.Render("~/bundles/jqueryval")
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- Styles -->
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<!-- Bootstrap -->
<link href="~/Content/line-awesome.min.css" rel="stylesheet" />
<!-- Icons -->
<link href="~/Content/style.css" rel="stylesheet" />
<!-- Style -->
<link href="~/Content/responsive.css" rel="stylesheet" />
<!-- Responsive -->
<link href="~/Content/colors/colors.css" rel="stylesheet" />